{"version":3,"file":"index.mjs","sources":["../src/index.ts"],"sourcesContent":["/** Encapsulating class for all is-checkers.  All methods\n * below this are static so there does not need to be any\n * references to constructors.  This class is meant to be\n * used as a utility class for checking the type of unknown\n * values.  This class is not meant to be instantiated.\n */\nexport default class IsHelper {\n   /** Determine whether any given unknown value is of type array.\n    * Will return false if the value is null or undefined.\n    */\n   public static isArray = <T = unknown>(value: unknown): value is T[] => {\n      if (this.isNullOrUndefined(value)) {\n         return false;\n      }\n\n      return (\n         Array.isArray(value) ||\n         value instanceof Float64Array ||\n         value instanceof Float32Array ||\n         value instanceof Int8Array ||\n         value instanceof Int16Array ||\n         value instanceof Int32Array ||\n         value instanceof Uint8Array ||\n         value instanceof Uint16Array ||\n         value instanceof Uint32Array ||\n         value instanceof Uint8ClampedArray ||\n         value instanceof BigInt64Array ||\n         value instanceof BigUint64Array\n      );\n   };\n\n   /** Determine whether any given unknown value can be converted into a boolean\n    * This includes the number types 1 and 0 and\n    * the string types \"true\", \"false\", \"y\", \"n\", \"yes\", \"no\".\n    * Will return false if the value is null or undefined or is not a boolean.\n    */\n   public static isBoolean = (value: unknown): value is boolean => {\n      return (\n         !IsHelper.isNullOrUndefined(value) &&\n         ((typeof value === \"boolean\" && (value === true || value === false)) ||\n            (typeof value === \"string\" && (value.toLowerCase() === \"true\" || value.toLowerCase() === \"false\")) ||\n            (typeof value === \"string\" && (value as string).toLowerCase() === \"y\") ||\n            (typeof value === \"string\" && (value as string).toLowerCase() === \"n\") ||\n            (typeof value === \"string\" && (value as string).toLowerCase() === \"yes\") ||\n            (typeof value === \"string\" && (value as string).toLowerCase() === \"no\") ||\n            (typeof value === \"string\" && (value as string) === \"1\") ||\n            (typeof value === \"string\" && (value as string) === \"0\") ||\n            value === 1 ||\n            value === 0)\n      );\n   };\n\n   /** Will take any unknown value and attempt to return a true boolean.  Uses the\n    * isBoolean method to determine if the value can be converted to a boolean.  Will\n    * return a default value of false if the value cannot be converted.\n    */\n   public static getBooleanValue = (value: unknown): boolean => {\n      if (!this.isBoolean(value)) {\n         return false;\n      }\n\n      return (\n         (typeof value === \"boolean\" && value === true) ||\n         (typeof value === \"string\" && (value as string).toLowerCase() === \"true\") ||\n         (typeof value === \"string\" && (value as string).toLowerCase() === \"y\") ||\n         (typeof value === \"string\" && (value as string).toLowerCase() === \"yes\") ||\n         (typeof value === \"string\" && (value as string).toLowerCase() === \"1\") ||\n         (value as unknown) === 1\n      );\n   };\n\n   /** Determines whether any unknown value is a JavaScript Date object. */\n   public static isDate = (value: unknown): value is Date => {\n      return Object.prototype.toString.call(value) === \"[object Date]\";\n   };\n\n   /** Determines whether any unknown value is an empty array.  Uses the\n    * isArray method to determine if the value is an array and then checks\n    * the length of the array to determine if it is empty.\n    */\n   public static isEmptyArray = (value: unknown): boolean => {\n      return IsHelper.isArray(value) && value.length === 0;\n   };\n\n   /** Determines whether any unknown value is an empty object.  Uses the\n    * isObject method to determine if the value is an object and then checks\n    * the length of the object to determine if it is empty.  Will return\n    * false if the value cannot be converted into an object */\n   public static isEmptyObject = (value: unknown): boolean => {\n      return IsHelper.isObject(value) && Object.keys(value).length === 0;\n   };\n\n   /** Determines whether any unknown value is an empty string.  Will return\n    * false if the value cannot be converted into a string. */\n   public static isEmptyString = (value: unknown): boolean => {\n      return IsHelper.isString(value) && String(value).length === 0;\n   };\n\n   /** Determines whether any unknown value is an empty string or whitespace.  Will return\n    * false if the value cannot be converted into a string. */\n   public static isEmptyStringOrWhitespace = (value: unknown): boolean => {\n      return IsHelper.isEmptyString(value) || IsHelper.isWhiteSpaceString(value);\n   };\n\n   /** Determines whether any unknown value is a function. */\n   // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n   public static isFunction = (value: unknown): value is Function => {\n      return typeof value === \"function\";\n   };\n\n   /** Determines whether any unknown value is in the format of an IP Address (v4). */\n   public static isIpv4 = (value: unknown): boolean => {\n      if (typeof value !== \"string\") {\n         return false;\n      }\n\n      const regex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/g;\n\n      return regex.test(value);\n   };\n\n   /** Determines whether an unknown value is an array, and, if it is, returns\n    * if the array is empty.  Will return false if the value is not an array.\n    */\n   public static isNonEmptyArray = (value: unknown): value is unknown[] => {\n      return !IsHelper.isNullOrUndefined(value) && IsHelper.isArray(value) && !IsHelper.isEmptyArray(value);\n   };\n\n   /** Determines if an unknown value is equal to a JavaScript null */\n   public static isNull = (value: unknown): value is null => {\n      return value === null;\n   };\n\n   /** Determines if an unknown value is equal to a JavaScript null or a JavaScript undefined */\n   public static isNullOrUndefined = (value: unknown): value is null | undefined => {\n      return IsHelper.isNull(value) || IsHelper.isUndefined(value);\n   };\n\n   /** Determines if an unknown value is equal to a JavaScript null, a JavaScript\n    * undefined, an empty string, or a string that contains only whitespace. */\n   public static isNullOrUndefinedOrEmptyStringOrWhitespace = (value: unknown): value is null | undefined | \"\" => {\n      return IsHelper.isNullOrUndefined(value) || IsHelper.isEmptyStringOrWhitespace(value);\n   };\n\n   /** Determines if an unknown value can be converted into any type of number. */\n   public static isNumber = (value: unknown): value is number => {\n      if (IsHelper.isNullOrUndefined(value)) {\n         return false;\n      }\n\n      if (typeof value === \"number\") {\n         return true;\n      }\n\n      if (typeof value !== \"string\") {\n         return false;\n      }\n\n      if (IsHelper.isEmptyStringOrWhitespace(value)) {\n         return false;\n      }\n\n      const regex = /^-{0,1}\\d*\\.{0,1}\\d{0,2}$/g;\n\n      return regex.test(String(value));\n   };\n\n   /** Determines if an unknown value can be converted into any type of\n    * number and, if so, is the number greater than zero.\n    */\n   public static isPositiveNumber = (value: unknown): value is number => {\n      if (!IsHelper.isNumber(value)) {\n         return false;\n      }\n\n      if (value <= 0) {\n         return false;\n      }\n\n      return true;\n   };\n\n   /** Determines if an unknown value can be converted into\n    * a number and, if so, is the number a whole integer. */\n   public static isInteger = (value: unknown): value is number => {\n      if (!IsHelper.isNumber(value)) {\n         return false;\n      }\n\n      if (!Number.isInteger(Number.parseFloat(value.toString()))) {\n         return false;\n      }\n\n      return true;\n   };\n\n   /** Determines if an unknown value can be converted into\n    * a number and, if so, is the number a whole integer and its\n    * value greater than zero. */\n   public static isPositiveInteger = (value: unknown): value is number => {\n      if (!IsHelper.isInteger(value)) {\n         return false;\n      }\n\n      if (value <= 0) {\n         return false;\n      }\n\n      return true;\n   };\n\n   /** Determines if an unknown value has the JavaScript primitive type\n    * of object. */\n   public static isObject = (value: unknown): value is object => {\n      return (\n         !IsHelper.isNullOrUndefined(value) &&\n         typeof value === \"object\" &&\n         !IsHelper.isFunction(value) &&\n         Object.prototype.toString.call(value) === \"[object Object]\"\n      );\n   };\n\n   /** Determines if an unknown value has the JavaScript primitive type\n    * of object, and, if so, does it only contain \"model-based\" properties\n    * (anything that can be prototyped). */\n   public static isPlainObject = <T = unknown>(value: unknown): value is Record<string | number | symbol, T> => {\n      if (!this.isObject(value)) {\n         return false;\n      }\n\n      const prototype = Object.getPrototypeOf(value);\n      return prototype === null || prototype === Object.getPrototypeOf({});\n   };\n\n   /** Determines if an unknown value is a string. */\n   public static isString = (value: unknown): value is string => {\n      return typeof value === \"string\";\n   };\n\n   /** Determines if an unknown value is a JavaScript undefined or\n    * equal to the string value of \"undefined\". */\n   public static isUndefined = (value: unknown): value is undefined => {\n      return typeof value === \"undefined\" || value === undefined;\n   };\n\n   /** Determines if an unknown value is a string that contains only whitespace. */\n   public static isWhiteSpaceString = (value: unknown): value is string => {\n      return IsHelper.isString(value) && !IsHelper.isEmptyString(value) && !/\\S/.test(String(value));\n   };\n}\n"],"names":[],"mappings":"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"}